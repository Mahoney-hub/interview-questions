import React, {useState} from 'react';
import {Row, Col, Button, Divider, Card} from 'antd';

const App = () => {

    const questions = [
        {
            id: 1,
            question: 'Отличие React от Angular',
            answer: 'React-это библиотека т.к нужно доустанавливать Роутинг, Редакс  и т.д по выбору. Angular-фреймворк, т.к доустанавливать ничего не надо.'
        },
        {
            id: 2,
            question: 'Зачем нужен React?',
            answer: 'React-нужен для эффективной отрисовки страницы приложения, для этого у него есть Виртуальный DOM. Виртуальный ДОМ  сравнивается с ДОМом Браузера, если есть различия –заменяется. Перерисовка происходит не всей страницы, а конкретного узла, в котором найдены различия.'
        },
        {
            id: 3,
            question: 'Что такое объект?',
            answer: 'Объект – это ассоциативный массив с рядом дополнительных возможностей. Хранит свойства пары ключ:значение'
        },
        {
            id: 4,
            question: 'Что такое функция?',
            answer: 'Функция-это объект, т.к имеет свои встроенные свойства: name, constructor и тд. Функция - это код, который можно использовать неоднократно'
        },
        {
            id: 5,
            question: 'Что такое чистая функция?',
            answer: 'Чистая функция - не имеет бизнес-логики, не работает с ДОМ, не посылает запросы на сервер (сайд эффект), просто получает данные(пропсы) и отображает их. Side Effect-запрос на сервер, работа с DOM, изменение параметров функции. Принципы чистой функции:  Иммутабельность- функция не имеет права изменить данные, которые в нее пришли. Идемпотентность (“не дай бог” если трудно запомнить)- дает один и тот же результат при каждом вызове. Детерминированность-т.е. результат предсказуем.'
        },
        {
            id: 6,
            question: 'Что такое чистая компонент?',
            answer: 'Компонент-это функция принимающая пропсы и возвращающая jsx разметку. Состоит из двух частей - над return код, функционал, снизу разметка.'
        },
        {
            id: 7,
            question: 'Методы map и filter',
            answer: 'Возвращают новый массив: map, filter. Map возвращает ровно столько элементов сколько в него пришло из массива, если по каким либо причинам данных для отрисовки последнего элемента массива не будет, то в последнем выдаст undefined. forEach-работает со «старым массивом».Find не изменяет массив, для которого он был вызван.'
        },
        {
            id: 8,
            question: 'SPREAD оператор',
            answer: 'SPREAD оператор - с его помощью обычно копируют или сливают массивы.'
        },
        {
            id: 9,
            question: 'Что такое Литерал?',
            answer: 'Литерал – это запись в нашем коде. Напр. 10 или "строка" или объект {a:10, b:20}. Литерал объекта — это список {ключ: «значение»}  в фигурных скобках.'
        },
        {
            id: 10,
            question: 'Что такое Колбэк-функция (или обратный вызов)?',
            answer: 'Колбэк-функция (или обратный вызов) - это функция, переданная в другую функцию в качестве аргумента, и от туда вызывается.'
        },
        {
            id: 11,
            question: 'Отличие элемента от компоненты',
            answer: 'Отличие элемента от компоненты: элемент - это что-то простейшее (к примеру, тэг h1 В который завернута строка h1), а компонент - это часть целого, т.е. функция, которая возвращает элементы.'
        },
        {
            id: 12,
            question: 'Что такое Стор?',
            answer: 'Стор-это глобальный объект, в котором находится state, getState, dispatch. Методы объекта Стора: GetState -дай стейт. Dispatch-вызывает изменения в стейте.'
        },
        {
            id: 13,
            question: 'Что такое Props?',
            answer: 'Props-это объект (вспомни как мы ее типизируем).'
        },
        {
            id: 14,
            question: 'Что такое NodeJS?',
            answer: 'NodeJS- это программа, которая находится на сервере (вместо браузера) и в нем работает JS. Браузер и NodeJS используют один и тот же движок v8-поэтому обоих воспринимает JS.'
        },
        {
            id: 15,
            question: 'Что такое GIT?',
            answer: 'GIT- система контроля версий.'
        },
        {
            id: 16,
            question: 'Что такое Замыкание?',
            answer: 'Замыкание- это способность функции получать доступ к данным ее внешнего лексического окружения (область видимости). Локальная зона видимости-внутри функции, глобальная зона видимости-для всего проекта. Замыкание противоречит чистой функции т.к. не явно может изменять данные. В отличие от функций объявленных с помощью let/const, классические функции (НЕ СТРЕЛОЧНЫЕ) полностью инициализируются не тогда, когда выполнение доходит до них, а раньше, когда создаётся лексическое окружение (с загрузки страницы). Замыкание используется в санках(Thunk).'
        },
        {
            id: 17,
            question: 'Что такое Хуки?',
            answer: 'Хуки — это функции, с помощью которых вы можете «подцепиться» к состоянию и методам жизненного цикла React из функциональных компонентов. Правила использования hook-ов: нельзя использовать в  массивах, условиях, циклах-если там будет меняться кол-во элементов. UseState- возвращает значение с состоянием и функцию для его обновления. Работает асинхронно.'
        },
        {
            id: 18,
            question: 'Что такое CRUD?',
            answer: 'CRUD-Create(POST-запрос на сервер) Read(GET-запрос на сервер) Update Delete. В ТудуЛисте мы реализуем CRUD.'
        },
    ]
    const renderQuestion = () => {
        const min = 0;
        const max = questions.length - 1;
        return  Math.floor(Math.random() * (max - min + 1)) + min;
    }

    type RenderQuestionType = {
        id:number
        question:string
        answer:string
    }

    const [text, setText] = useState<string>('none')
    const [question, setQuestion] = useState<RenderQuestionType>(questions[renderQuestion()])

    const showP = () => {
        setText(text === 'none' ? 'block' : 'none')
    }

    const nextQuestion = () => {
        setQuestion(questions[renderQuestion()])
    }



    return (
        <div>
            <Divider orientation="left">Quiz</Divider>
            <Row justify={'center'}>
                <Col span={12}>
                    <Card
                        hoverable
                        title={question.question}
                        bordered={false}
                    >
                        <p style={{display: text}}>{question.answer}</p>
                        <div style={{display: 'flex', justifyContent: 'space-between'}}>
                            <Button type="primary" onClick={showP}>Показать ответ</Button>
                            <Button type="primary" danger>Следующий вопрос</Button>
                        </div>
                    </Card>
                </Col>
            </Row>
        </div>
    );
};

export default App;