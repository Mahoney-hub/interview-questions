import {v1} from 'uuid';

export const questionsOther = [
    {
        id: v1(),
        question: 'HTTP?',
        answer: 'HTTP - протокол передачи данных. Позволяет отправить название сайта(ресурса). HTTPS-его усовершенствованная защищенная версия. Когда шлем запрос через HTTP можно перехватить сигнал WI-FI, украсть куки, и с другого компьютера зайти в чужой аккаунт. HTTPS-в начале меняется секретными ключами (чтобы убедиться, что это не перехват) , а потом шифрует всю информацию исходящую с нашего компьютера. Также сайты получают специальные протоколы безопасности.Типы HTTP/ HTTPS запросов: GET-получить. Можно уточнить запрос если добавить в него query параметры: название сайта? (ставим вопросительный знак и после него пишеи параметры, к примеру) page=100&users=100. POST–отправить/обновить свои данные на сервер. POST-запрос в отличие от GET-запроса защищен, имеет тело. PUT- обновить, как и POST имеет тело.  DELETE-удалить данные, не имеет тела как и GET. '
    },
    {
        id: v1(),
        question: 'Что такое DNS?',
        answer: 'Domain Name System. Вся сеть интернет состоит из DNS серверов. Это распределители (как удлинитель из которого тянутся сотни проводов), и одновременно справочники. Мы на компьютере набираем Kamasutra.com-наш запрос идет на ближайший DNS сервер, от него к другому, пока скажем мы не свяжемся с сервером, который находится в США. DNS сервер сравнивает наше текстовое название сайта Kamasutra.com с IP адресом(192.172.333.444) и направляет наш запрос в нужную сторону.'
    },
    {
        id: v1(),
        question: 'Что такое TDD?',
        answer: 'это разработка при помощи тестирования.  Вначале тест, а потом уже код. Для чего это нужно: делаем кнопку-все ок, но пять кнопок сделанные за год до этого перестают работать, и мы даже не узнаем об этом…'
    },
    {
        id: v1(),
        question: 'Что такое SOLID(расширенные правила ООП)?',
        answer: 'Single Responsibility-принцип единственной ответственности: одна функция-одна задача, Open/Close-расширяем функционал за счет написания новых классов/компонент а не догружая старый класс/компоненту(открыт для раширения, закрыт для модификации) Liskov-принцип Барбары Лиски: необходимо, чтобы класс-потомок был способен обрабатывать те же запросы, что и родитель, и выдавать тот же результат. К  примеру: класс-родитель подаёт кофе (в любых видах), значит, для класса-потомка приемлемо подавать капучино (разновидность кофе), но неприемлемо подавать воду. Interface-инкапсуляция. Несколько специализированных интерфейсов лучше, чем один универсальный. Depency Invertion- принцип инверсии зависимостей. Модули верхнего уровня не должны зависеть от нижнего-т.е. логика (верхний уровень не должна зависеть от деталей-т.е. от нижнего уровня)'
    },
    {
        id: v1(),
        question: 'Чем отличается localStorage от sessionStorage?',
        answer: 'Могут хранить пары ключ-значение в браузере. localStorage-бесконечно, или можно настроить. SessionStorage-до выключения браузера.'
    },
    {
        id: v1(),
        question: 'Что такое Куки?',
        answer: 'Это текстовый документ по принципу ключ-значение: key: value. Хранятся в браузере (на серваке не хранятся!) Сколько сайтов, столько и файлов. И реквест и респонс с сервера вносят изменения в файл куки.  Обычно используются для проверки паролей. При регистрации на сайте пароль хешируется. Один хеш пароля остается  на компьютере, второй уходит на сервер. При входе на сайт, два хеша сравниваются. Также в куке хранится время жизни-сколько будет хранится логин-пароль. Скажем запоминает на 2 недели, а далее нужно вводить по новой.'
    },
    {
        id: v1(),
        question: 'Что такое CRUD?',
        answer: 'CRUD-Create(POST-запрос на сервер) Read(GET-запрос на сервер) Update Delete. В ТудуЛисте мы реализуем CRUD.'
    },
    {
        id: v1(),
        question: 'Что такое GIT?',
        answer: 'GIT- система контроля версий.'
    },
    {
        id: v1(),
        question: 'Что такое NodeJS?',
        answer: 'NodeJS- это программа, которая находится на сервере (вместо браузера) и в нем работает JS. Браузер и NodeJS используют один и тот же движок v8-поэтому обоих воспринимает JS.'
    },
]